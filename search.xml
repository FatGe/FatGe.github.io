<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[React & Redux in TypeScript - 静态类型指南]]></title>
    <url>%2F2019%2F07%2F17%2Freact-in-ts%2F</url>
    <content type="text"><![CDATA[翻译自 react-redux-typescript-guide，作者：Piotrek Witek 翻译自 TypeScriptでRedux Thunkを使う，作责：Yusuke Mori 参考文章 TypeScript 2.8下的终极React组件模式 概述：最近在学习 react&amp;TypeScript，发现有许多的组件模式和方法需要去梳理和总结。所以选择一些文章用于沉淀和思考，记录下一些知识点，和大家探讨。 publish：2019-03-21 目录： 简介，环境配置（create-react-app） React - 关键类型（react-redux-typescript-guide ） React - 组件模式（react-redux-typescript-guide &amp; TypeScript 2.8下的终极React组件模式） Redux - 使用以及 Redux Thunk 使用（TypeScriptでRedux Thunkを使う） 总结 React - 关键类型 展示性组件（FunctionComponent） React.FunctionComponent&lt;P&gt; or React.FC&lt;P&gt;。 const MyComponent: React.FC&lt;Props&gt; = ... 有状态组件（ClassComponent） React.Component&lt;P, S&gt; class MyComponent extends React.Component&lt;Props, State&gt; { ... 组件Props React.ComponentProps&lt;typeof Component&gt; 获取组件（适用于ClassComponent、FunctionComponent）的Props的类型 type MyComponentProps = React.ComponentProps&lt;typeof MyComponent&gt;; React.FC | React.Component的联合类型 React.ComponentType&lt;P&gt; 123const withState = &lt;P extends WrappedComponentProps&gt;( WrappedComponent: React.ComponentType&lt;P&gt;,) =&gt; &#123; ... React 要素 React.ReactElement&lt;P&gt; or JSX.Element 表示React元素概念的类型 - DOM组件（例如）或用户定义的复合组件（） const elementOnly: React.ReactElement = &lt;div /&gt; || &lt;MyComponent /&gt;; React Node React.ReactNode 表示任何类型的React节点（基本上是ReactElement（包括Fragments和Portals）+ 原始JS类型 的合集） 12const elementOrPrimitive: React.ReactNode = 'string' || 0 || false || null || undefined || &lt;div /&gt; || &lt;MyComponent /&gt;;const Component = (&#123; children: React.ReactNode &#125;) =&gt; ... React CSS属性 React.CSSProperties 代表着Style Object在 JSX 文件中（通常用于 css-in-js） 12const styles: React.CSSProperties = &#123; flexDirection: 'row', ...const element = &lt;div style=&#123;styles&#125; ... 通用的 React Event Handler React.ReactEventHandler&lt;HTMLElement&gt; 123const handleChange: React.ReactEventHandler&lt;HTMLInputElement&gt; = (ev) =&gt; &#123; ... &#125; &lt;input onChange=&#123;handleChange&#125; ... /&gt; 特殊的 React Event Handler React.MouseEvent&lt;E&gt; | React.KeyboardEvent&lt;E&gt; | React.TouchEvent&lt;E&gt; 123const handleChange = (ev: React.MouseEvent&lt;HTMLDivElement&gt;) =&gt; &#123; ... &#125;&lt;div onMouseMove=&#123;handleChange&#125; ... /&gt; React 组件模式 Function Components - FC 纯函数组件（无状态） 顾名思义，纯函数组件本身不具备 State，所以没有状态，一切通过 Props 12345678910111213141516171819202122import React, &#123; FC, ReactElement, MouseEvent &#125; from 'react'type Props = &#123; label: string, children: ReactElement, onClick?: (e: MouseEvent&lt;HTMLButtonElement&gt;) =&gt; void&#125;const FunctionComponent: FC&lt;Props&gt; = (&#123; label, children, onClick &#125;: Props) =&gt; &#123; return ( &lt;div&gt; &lt;span&gt; &#123;label&#125;： &lt;/span&gt; &lt;button type="button" onClick=&#123;onClick&#125;&gt; &#123;children&#125; &lt;/button&gt; &lt;/div&gt; )&#125;export default FunctionComponent 扩展属性（spread attributes） 利用 ... 对剩余属性进行处理 12345678910111213141516171819202122import React, &#123; FC, ReactElement, MouseEvent, CSSProperties &#125; from 'react'type Props = &#123; label: string, children: ReactElement, className?: string, style?: CSSProperties, onClick?: (e: MouseEvent&lt;HTMLButtonElement&gt;) =&gt; void,&#125;const FunctionComponent: FC&lt;Props&gt; = (&#123; label, children, onClick, ...resetProps &#125;: Props) =&gt; &#123; return ( &lt;div &#123;...resetProps&#125;&gt; &lt;span&gt;&#123;label&#125;：&lt;/span&gt; &lt;button type="button" onClick=&#123;onClick&#125;&gt; &#123;children&#125; &lt;/button&gt; &lt;/div&gt; )&#125;export default FunctionComponent 默认属性 如果，需要默认属性，可以通过默认参数值来处理 123456789101112131415161718192021import React, &#123; FC, ReactElement, MouseEvent &#125; from 'react'type Props = &#123; label?: string, children: ReactElement,&#125;const FunctionComponent: FC&lt;Props&gt; = (&#123; label = 'Hello', children &#125;: Props) =&gt; &#123; return ( &lt;div&gt; &lt;span&gt; &#123;label&#125;： &lt;/span&gt; &lt;button type="button"&gt; &#123;children&#125; &lt;/button&gt; &lt;/div&gt; )&#125;export default FunctionComponent Class Components 相对于FC，多了 state，采用如下形式来定义Class Component 这一部分的写法，与TypeScript 2.8下的终极React组件模式相同，觉得结构很清晰，复用。 1234567891011121314151617181920212223242526272829303132333435363738import React, &#123; Component &#125; from 'react';type Props = &#123; label: string&#125;const initialState = &#123; count: 0&#125;type State = Readonly&lt;typeof initialState&gt;class ClassCounter extends Component&lt;Props, State&gt; &#123; readonly state: State = initialState private handleIncrement = () =&gt; this.setState(Increment) render() &#123; const &#123; handleIncrement &#125; = this; const &#123; label &#125; = this.props; const &#123; count &#125; = this.state; return ( &lt;div&gt; &lt;span&gt; &#123;label&#125;: &#123;count&#125; &lt;/span&gt; &lt;button type="button" onClick=&#123;handleIncrement&#125;&gt; &#123;`Increment`&#125; &lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export const Increment = (preState: State) =&gt; (&#123; count: preState.count + 1 &#125;)export default ClassCounter 默认属性 处理 Class Component 的默认属性，主要有两种方法： 一是定义高阶组件，例如TypeScript 2.8下的终极React组件模式中，利用 withDefaultProps 来定义默认属性，涉及组件的属性的类型转换； 二是利用 static props 以及 componentWillReceiveProps，处理默认属性。 具体业务中，视情况而定，第一中可以查看相关文章，这里介绍第二种 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import React, &#123; Component &#125; from 'react';type Props = &#123; label: string, initialCount: number&#125;type State = &#123; count: number;&#125;class ClassCounter extends Component&lt;Props, State&gt; &#123; static defaultProps = &#123; initialCount: 1, &#125; // 依据 defaultProps 对 state 进行处理 readonly state: State = &#123; count: this.props.initialCount, &#125; private handleIncrement = () =&gt; this.setState(Increment) // 响应 defaultProps 的变化 componentWillReceiveProps(&#123; initialCount &#125;: Props) &#123; if (initialCount != null &amp;&amp; initialCount !== this.props.initialCount) &#123; this.setState(&#123; count: initialCount &#125;) &#125; &#125; render() &#123; const &#123; handleIncrement &#125; = this; const &#123; label &#125; = this.props; const &#123; count &#125; = this.state; return ( &lt;div&gt; &lt;span&gt; &#123;label&#125;: &#123;count&#125; &lt;/span&gt; &lt;button type="button" onClick=&#123;handleIncrement&#125;&gt; &#123;`Increment`&#125; &lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export const Increment = (preState: State) =&gt; (&#123; count: preState.count + 1 &#125;)export default ClassCounter 通用组件 Generic Components 复用共有的逻辑创建组件 常用于通用列表 12345678910111213141516import React, &#123; Component, ReactElement &#125; from 'react'interface GenericListProps&lt;T&gt; &#123; items: T[], itemRenderer: (item: T, i: number) =&gt; ReactElement,&#125;class GenericList&lt;T&gt; extends Component&lt;GenericListProps&lt;T&gt;, &#123;&#125;&gt; &#123; render() &#123; const &#123; items, itemRenderer &#125; = this.props return &lt;div&gt;&#123;items.map(itemRenderer)&#125;&lt;/div&gt; &#125;&#125;export default GenericList Render Callback &amp; Render Props Render Callback，也被称为函数子组件，就是将 children 替换为 () =&gt; children； Render Props，就是将 () =&gt; component 作为 Props 传递下去。 1234567891011121314151617181920212223242526272829import React, &#123; Component, ReactElement &#125; from 'react';type Props = &#123; PropRender?: () =&gt; ReactElement, children?: () =&gt; ReactElement&#125;class PropRender extends Component&lt;Props, &#123;&#125;&gt; &#123; render() &#123; const &#123; props: &#123; children, PropRender &#125; &#125;: &#123; props: Props &#125; = this; return ( &lt;div&gt; &#123; PropRender &amp;&amp; PropRender() &#125; &#123; children &amp;&amp; children() &#125; &lt;/div&gt; ) &#125;&#125;export default PropRender// 应用&lt;PropsRender PropRender=&#123;() =&gt; (&lt;p&gt;Prop Render&lt;/p&gt;)&#125; &gt; &#123; () =&gt; (&lt;p&gt;Child Render&lt;/p&gt;) &#125; &lt;/PropsRender&gt; HOC（Higher-Order Components） 简单理解为，接受React组件作为输入，输出一个新的React组件的组件的工厂函数。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import * as React from 'react'interface InjectedProps &#123; label: string&#125;export const withState = &lt;BaseProps extends InjectedProps&gt;( BaseComponent: React.ComponentType&lt;BaseProps&gt;) =&gt; &#123; type HocProps = BaseProps &amp; InjectedProps &amp; &#123; initialCount?: number &#125; type HocState = &#123; readonly count: number &#125; return class Hoc extends React.Component&lt;HocProps, HocState&gt; &#123; // 方便 debugging in React-Dev-Tools static displayName = `withState($&#123;BaseComponent.name&#125;)`; // 关联原始的 wrapped component static readonly WrappedComponent = BaseComponent; readonly state: HocState = &#123; count: Number(this.props.initialCount) || 0, &#125; handleIncrement = () =&gt; &#123; this.setState(&#123; count: this.state.count + 1 &#125;) &#125; render() &#123; const &#123; ...restProps &#125; = this.props as any const &#123; count &#125; = this.state return ( &lt;&gt; &#123;count&#125; &lt;BaseComponent onClick=&#123;this.handleIncrement&#125; &#123;...restProps&#125; /&gt; &lt;/&gt; ) &#125; &#125;&#125; Redux - 使用以及 Redux Thunk 使用以如下形式来介绍Redux，主要是in-ts的使用： (prestate, action) =&gt; state； 使用Redux Thunk 来出来异步操作。 123456789101112131415// store.jstype DataType = &#123; counter: number&#125;const DataState: DataType = &#123; counter: 0&#125;type RootState = &#123; Data: DataType&#125;export default RootState 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849// action.jsimport &#123; Action, AnyAction &#125; from 'redux'import &#123; ThunkAction, ThunkDispatch &#125; from 'redux-thunk'import RootState from '../store/index'type IncrementPayload = &#123; value: number&#125;interface IncrementAction extends Action &#123; type: 'INCREMENT', payload: IncrementPayload&#125;export const Increment = (&#123; value &#125;: IncrementPayload): IncrementAction =&gt; &#123; const payload = &#123; value &#125; return &#123; type: 'INCREMENT', payload &#125;&#125;export type DecrementPayload = &#123; value: number;&#125;;export interface DecrementAction extends Action &#123; type: 'DECREMENT'; payload: DecrementPayload;&#125;export type RootAction = IncrementAction &amp; DecrementAction;export const asyncIncrement = ( payload: IncrementPayload): ThunkAction&lt;Promise&lt;void&gt;, RootState, void, AnyAction&gt; =&gt; &#123; return async (dispatch: ThunkDispatch&lt;RootState, void, AnyAction&gt;): Promise&lt;void&gt; =&gt; &#123; return new Promise&lt;void&gt;((resolve) =&gt; &#123; console.log('Login in progress') setTimeout(() =&gt; &#123; dispatch(Increment(payload)) setTimeout(() =&gt; &#123; resolve() &#125;, 1000) &#125;, 3000) &#125;) &#125;&#125; 123456789101112131415// reducer.jsimport &#123; DataState, DataType &#125; from '../store/Data'import &#123; RootAction &#125; from '../actions/'export default function (state: DataType = DataState, &#123; type, payload &#125;: RootAction): DataType &#123; switch(type) &#123; case 'INCREMENT': return &#123; ...state, counter: state.counter + payload.value, &#125;; default: return state; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// Hearder.jsimport React, &#123; Component, ReactNode &#125; from 'react'import RootState from '../store/index'import &#123; Dispatch, AnyAction &#125; from 'redux'import &#123; ThunkDispatch &#125; from 'redux-thunk'import &#123; connect &#125; from 'react-redux'import &#123; Increment, asyncIncrement &#125; from '../actions/'const initialState = &#123; name: 'string'&#125;type StateToPropsType = Readonly&lt;&#123; counter: number&#125;&gt;type DispatchToPropsType = Readonly&lt;&#123; handleAdd: () =&gt; void, handleDec: () =&gt; void&#125;&gt;type StateType = Readonly&lt;typeof initialState&gt;type PropsType = &#123; children?: ReactNode&#125;type ComponentProps = StateToPropsType &amp; DispatchToPropsType &amp; PropsTypeclass Header extends Component&lt;ComponentProps, StateType&gt; &#123; readonly state: StateType = initialState; render() &#123; const &#123; props: &#123; handleAdd, handleDec, counter &#125;, state: &#123; name &#125; &#125; = this return ( &lt;div&gt; 计数：&#123;counter&#125; &lt;button onClick=&#123;handleAdd&#125;&gt;+&lt;/button&gt; &lt;button onClick=&#123;handleDec&#125;&gt;-&lt;/button&gt; &lt;/div&gt; ) &#125; private handleClick = () =&gt; this.setState(sayHello);&#125;const sayHello = (prevState: StateType) =&gt; (&#123; name: prevState.name + 'Hello world',&#125;)const mapStateToProps = (state: RootState, props: PropsType): StateToPropsType =&gt; &#123; return &#123; counter: state.Data.counter &#125;&#125;const mapDispatchToProps = (dispatch: ThunkDispatch&lt;RootState, void, AnyAction&gt;): DispatchToPropsType =&gt; &#123; return &#123; handleAdd: () =&gt; &#123; dispatch(Increment(&#123; value: 2 &#125;)) &#125;, handleDec: async () =&gt; &#123; dispatch(asyncIncrement(&#123; value: 10 &#125;)) &#125; &#125;&#125;export default connect&lt;StateToPropsType, DispatchToPropsType, PropsType, RootState&gt;(mapStateToProps, mapDispatchToProps)(Header)]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>react</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
</search>
